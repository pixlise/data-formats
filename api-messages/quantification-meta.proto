syntax = "proto3";
option go_package = ".;protos";

import "job.proto";
import "ownership-access.proto";

// Quant Parameters and summary info (metadata about a quant)

// TODO: Quants likely need to change to accommodate quantifying spectra from multiple
// datasets together??
message QuantStartingParameters
{
	QuantCreateParams params = 1;

	// This is for when we store/send just the summary, sometimes we only need to supply count for brevity
	uint32 pmcCount = 2;

	// Paths, Buckets, to help runner initialise
	string scanFilePath = 3;
	string dataBucket = 4;
	string piquantJobsBucket = 5;

	// How many cores we expect to have on the same node as us!
	uint32 coresPerNode = 6;
	uint32 startUnixTimeSec = 7;
    string requestorUserId = 8;
	string PIQUANTVersion = 9;
	string comments = 10;
}

message QuantCreateParams
{
	// Depending on this, we may return the result straight away or return a job status
    // Valid values at time of writing are:
    // "map" - Runs a quant job, to output a map
    // "quant" - Runs a quant "fit", a quick job, so we wait and return the result in resp
	string command = 1;

    // Name of the quantification - note for "quant" (aka Fit) mode, this is not needed
    string name = 2;

    // Required, id of scan file to pass to PIQUANT
	string scanId = 3;

    // List of all PMCs (over wire it should be sent encoded with our simple compression method)
	repeated int32 pmcs = 4;

    // What elements to quantify. NOTE: PIQUANT output will not necessarily match this as
    // it may choose to output oxides or carbonates
	repeated string elements = 5;

    // The config of the detector used to capture the scan
	string detectorConfig = 6;

    // Any extra command line parameters, these are just tacked onto the cmd line
	string parameters = 7;

    // A "hint" to the PIQUANT runner saying how fast we want it to complete. It should
    // then create more or less nodes to run PIQUANT on to try to achieve that run time
	uint32 runTimeSec = 8;

    // What kind of quantification we're creating
	string quantMode = 9;

    // List of all ROI IDs within the scan that we want to quantify. This is required
    // so we can output bulk quants for all PMCs in an ROI
    // NOTE: If QuantMode = *Bulk, this is used, pmcsEncoded is ignored.
	repeated string roiIDs = 10;

    // Should dwell spectra be included in the quantification calculation
	bool includeDwells = 11;
}

message QuantificationSummary
{
    string id = 1; // @gotags: bson:"_id,omitempty"
    string scanId = 5;
	QuantStartingParameters params = 2;
	repeated string elements = 3;
	JobStatus status = 4;
	// TODO: Make this also contain *APIObjectItem and remove its own Shared field...

	// Only sent out by API, not stored in DB this way
    OwnershipSummary owner = 10;  // @gotags: bson:"-"
}


// Quant Data storage
// For now we supply the same format as the quant files