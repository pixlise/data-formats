syntax = "proto3";
option go_package = ".;protos";

import "image.proto";
import "image-beam-location.proto";



/* Originals:
(This becomes an actual HTTP GET) GET    /dataset/download/{DID}/{id}                         -> public
-DELETE /dataset/images/{DID}/{imgtype}/{image}              -> write:dataset
-GET    /dataset/images/{DID}/{imgtype}/{image}              -> public
-POST   /dataset/images/{DID}/{imgtype}/{image}              -> write:dataset
-PUT    /dataset/images/{DID}/{imgtype}/{image}              -> write:dataset
-GET    /dataset/images/{DID}/{imgtype}                      -> public
*/

// Listing all images for a given set of scan IDs

// requires(NONE)
message ImageListReq
{
    repeated string scanIds = 1;

    // If false, returns all images associated with any of the scan IDs
    // otherwise only returns images which are associated with all IDs
    bool mustIncludeAll = 2;
}

message ImageListResp
{
    repeated ScanImage images = 1;
    uint32 defaultImageIdx = 2;
}

// requires(SCAN_EDIT)
message ImageSetDefaultReq
{
    repeated string scanIds = 1;
    string defaultImageFileName = 2;
}

message ImageSetDefaultResp
{
}

// NOTE: The above lists images, but the client will need to query the image as
// a standard HTTP GET using the url from ScanImage above. JWT needs to be included


// Uploading a new image for a given scan. This can be any kind of image
// supported by PIXLISE:
// - Instrument-generated images, eg MCC on PIXL. These are delivered
//   through the GDS pipeline normally but one could be uploaded by this
//   image the same way
// - Processed/derived images, eg RGBU TIF images based on PIXL MCC imagery
//   These are generated externally to PIXLISE based on existing MCC images.
//   The beam coordinates are identical to the image they come from, so the
//   original image name is required
// - Other images which have been warped to match one of the existing
//   sets of beam coordinates, again needing to reference the original
//   image, to associate with its coordinates
// - Other context images, don't have associated beam coordinates
// - Images that show areas where other scans are all in view. These are
//   generated by Mars Viewer and come with beam coordinates for each scan
//   that's visible on the image

// requires(SCAN_EDIT)
message ImageUploadReq
{
    string name = 1;
    bytes imageData = 2;

    oneof Assocation
    {
        // If uploading the optional beam locations, they can be in this field
        // NOTE: locationPerScan.imageFileName must be empty
        ImageLocations locationPerScan = 3;

        // Otherwise, if we're saying this image will use the beam
        // data for another image, put the name of the other image here
        ImageMatchTransform beamImageRef = 4;
    }
}

message ImageUploadResp
{
}

// Deletes ONLY user-created image, should publish a ImageListUpd to go out

// requires(SCAN_EDIT)
message ImageDeleteReq
{
    string name = 1;
}

message ImageDeleteResp
{
}
