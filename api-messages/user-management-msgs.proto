syntax = "proto3";
option go_package = ".;protos";

import "user.proto";


/* Originals:
-GET    /user/all-roles                                      -> read:user-roles
(deprecated) POST   /user/bulk-user-details                              -> write:user-roles
-GET    /user/by-id/{id}                                     -> read:user-roles
-GET    /user/by-role/{id}                                   -> read:user-roles
-GET    /user/query                                          -> read:user-roles
-DELETE /user/roles/{user_id}/{id}                           -> write:user-roles
-POST   /user/roles/{user_id}/{id}                           -> write:user-roles
-GET    /user/roles/{user_id}                                -> read:user-roles
*/

////////////////////////////////////
// Get all users

// requires(USER_ADMIN)
message UserListReq
{
    oneof QueryType {
        string roleId = 1; // Get all users who have a role
        string userId = 2; // Get a specific user by ID
        string searchText = 3; // Get all users who have searchText in their name/surname
    }
}

message UserListResp
{
    repeated Auth0UserDetails details = 1;
}

////////////////////////////////////
// Get all user roles
// requires(USER_ADMIN)
message UserRoleListReq
{
}

message UserRoleListResp
{
    repeated Auth0UserRole roles = 1;
}

////////////////////////////////////
// Get roles for a given user
// requires(USER_ADMIN)
message UserRolesListReq
{
    string userId = 1;
}

message UserRolesListResp
{
    repeated Auth0UserRole roles = 1;
}

////////////////////////////////////
// Add a user role to a user
// requires(USER_ADMIN)
message UserAddRoleReq
{
    string userId = 1;
    string roleId = 2;
}

// Changing user roles, this should publish a UserDetailsUpd
message UserAddRoleResp
{
}

////////////////////////////////////
// Delete a user role for a user
// requires(USER_ADMIN)
message UserDeleteRoleReq
{
    string userId = 1;
    string roleId = 2;
}

// Changing user roles, this should publish a UserDetailsUpd
message UserDeleteRoleResp
{
}

////////////////////////////////////
// To impersonate a user, we can send this in. This modifies the user stored in memory for a
// given web socket session to contain the details of the user we want to impersonate.

// requires(PIXLISE_ADMIN)
message UserImpersonateReq
{
    // "Become" the user with specified id. If this is blank, this session stops impersonating
    string userId = 1;
}

message UserImpersonateResp
{
    // Returns the currently set user in this user session
    UserInfo sessionUser = 1;
}

// Allows querying if we're impersonating anyone
// requires(NONE)
message UserImpersonateGetReq
{
}

message UserImpersonateGetResp
{
    // Returns the currently set user in this user session
    UserInfo sessionUser = 1;
}

// requires(NONE)
message ReviewerMagicLinkCreateReq
{
    int64 accessLength = 1;
    string workspaceId = 2;
    string clientId = 3;
    string audience = 4;
}

message ReviewerMagicLinkCreateResp
{
    string magicLink = 1;
}

// requires(NONE)
message ReviewerMagicLinkLoginReq
{
    string magicLink = 1;
    string clientId = 2;
    string domain = 3;
    string audience = 4;
    string redirectURI = 5;
}

message ReviewerMagicLinkLoginResp
{
    string userId = 1;
    string token = 2;
    string email = 3;
    string nonSecretPassword = 4;
}