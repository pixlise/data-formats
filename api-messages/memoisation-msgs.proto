syntax = "proto3";
option go_package = ".;protos";

import "memoisation.proto";


// General memosation mechanism for data used by the client. The contents is just a byte buffer, and the key should
// be unique enough that any instance of the client loads the right thing back!

// The initial use-case for this is storing Expression calculated results. Here we need to be careful to load back
// only for the right expression. Anything else used/generated by the client can also be stored here, eg thumbnail
// images or something similar.

// Can consider this long-term storage but only used for storing stuff that can be recalculated otherwise
// by the client.

// Upper-limit of size of data stored is what's supported by our web socket max message size

// Requires no permissions because it's just a caching mechanism, users shouldn't even know it's here

// requires(NONE)
message MemoiseWriteReq
{
    string key = 1;
    bytes data = 2;

    string scanId = 3;
    string quantId = 4;
    string exprId = 5;
}

message MemoiseWriteResp
{
    uint32 memoTimeUnixSec = 1;
}

/* Went unused, moved to HTTP requests, so get has query parameter for key, item is returned in response payload
// requires(NONE)
message MemoiseGetReq
{
    string key = 1;
}

message MemoiseGetResp
{
    MemoisedItem item = 1;
}
*/

// requires(NONE)
message MemoiseDeleteReq
{
    string key = 1;
}

message MemoiseDeleteResp
{
    bool success = 1;
}

// requires(NONE)
message MemoiseDeleteByRegexReq
{
    string pattern = 1;
}

message MemoiseDeleteByRegexResp
{
    uint32 numDeleted = 1;
}